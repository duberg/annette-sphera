# Annette settings
annette {

  enabled += "annette.app.AppModule"

  services.defaultTimeout = 30s

  secret = "odw9BImB5pkF`XasEdfuuA=gueReN0;b2eaY1VVziUNTyfdesmmkAk0InRzKRJ3S"

  http {
    active = true
    host = "localhost"
    port = 9000
  }
  cluster = false

  // таймаут для акторов (в мс)
  actorTimeout = 20s

  // количество параллельных акторов данных (по умолчанию 4)
  parallelProc = 8

  core {
    AuthenticationService {
      rememberMeSessionTimeout = 14d
      sessionTimeout = 1h
    }
  }

  security {
    # Ссылка на форму входа в систему.
    # Если результат проверки аутентификации пользователя отрицательный, то перенаправляем на эту ссылку
    # Uri содержит URI первоначального запроса, после входа в систему
    login = "/auth/login?uri=:uri"

    # Tаймаут для запроса AuthenticationService (в миллисекундах),
    # Если ответ не получен после таймаута считаем, что пользователь не аутентифицирован
    # Таймаут по умолчанию 3 секунды
    authenticationServiceTimeout = 30s

    # Таймаут сессии пользователя в минутах
    sessionTimeout = 600
  }

  cassandra {
    hosts = [ "127.0.0.1" ]
    keyspace = "annette_sphera"
    user = "annette"
    password = "abc"
  }

  //  cassandra {
  //    hosts = [ "192.168.1.243", "192.168.1.231", "192.168.1.232", "192.168.1.233" ]
  //    keyspace = test
  //    user = "kantemirov"
  //    password = "abc"
  //  }

  core.initDb {
    createSchema = false

    languages = [
      {id = "RU", name = "Russian"},
      {id = "EN", name = "English"}
    ]

    applications = [
      {
        id = "MARKETING"
        code = "marketing"
        name = "Торговля"
      },
      {
        id = "ADMIN"
        code = "admin"
        name = "Администрирование"
      },
      {
        id = "ECOMMERCE"
        code = "ecommerce"
        name = "Электронная коммерция"
      },
      {
        id = "CLOUDMANAGER"
        code = "cloudmanager"
        name = "Облачный менеджер"
      }
    ]

    tenants = [
      {
        id = "SPHERA"
        name = "Сфера"
        applications = ["MARKETING", "ADMIN"]
        languages = ["RU", "EN"]
      },
      {
        id = "MERIDIAN"
        name = "Меридиан"
        applications = ["MARKETING", "ADMIN", "ECOMMERCE", "CLOUDMANAGER"]
        languages = ["RU", "EN"]
      },
      {
        id = "RAINBOW"
        name = "Радуга"
        applications = ["MARKETING", "ADMIN"]
        languages = ["RU", "EN"]
      }
    ]

    users = [
      {
        id = "00000000-0000-0000-0000-000000000000"
        firstName = "Давид"
        lastName = "Кантемиров"
        email = "it@kantemirov.ru"
        phone = "+79166633681"
        avatarUrl = "./assets/app/media/img/users/user4.jpg"
        tenants = [
          { tenant = "SPHERA" },
          { tenant = "RAINBOW", roles = ["admin", "chairman", "expert" ]}
        ]
      },
      {
        id = "00000000-0000-0000-0000-000000000001"
        firstName = "Дмитрий"
        lastName = "Рогачев"
        email = "dmitry.rogachev@gmail.com"
        phone = "+79104216192"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" },
          { tenant = "RAINBOW", roles = ["admin", "chairman", "expert" ]}
        ]
      },
      {
        firstName = "Максим"
        lastName = "Авдеев"
        email = "maxim.avdeev@gmail.com"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" },
          { tenant = "RAINBOW" }
        ],
        status = 0
      },
      {
        firstName = "Игорь"
        lastName = "Немцов"
        email = "igor.nemtsov@gmail.com"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" },
          { tenant = "RAINBOW", roles = ["admin", "chairman", "expert" ]}
        ],
        status = 2
      },
      {
        firstName = "Максим"
        lastName = "Киржаков"
        email = "maksim.kirjakov@yandex.ru"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" }
        ],
        status = 2
      },
      {
        firstName = "Светлана"
        lastName = "Смирнова"
        email = "svetlana.smirnova@gmail.com"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" }
        ]
      },
      {
        firstName = "Феликс"
        lastName = "Кантемиров"
        email = "felix@kantemirov.ru"
        phone = "+79210785566"
        avatarUrl = "./assets/app/media/img/users/user4.jpg"
        tenants = [
          { tenant = "SPHERA" },
          { tenant = "RAINBOW", roles = ["admin", "chairman", "expert" ]}
        ]
      },
      {
        firstName = "Иван"
        lastName = "Рогачев"
        email = "ivan.rogachev@gmail.com"
        phone = "+79104306891"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" },
          { tenant = "RAINBOW", roles = ["admin", "chairman", "expert" ]}
        ]
      },
      {
        firstName = "Петр"
        lastName = "Авдеев"
        email = "petr.avdeev@gmail.com"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" },
          { tenant = "RAINBOW" }
        ]
      },
      {
        firstName = "Дмитрий"
        lastName = "Протопенко"
        email = "dmitri.protopenko@gmail.com"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" },
          { tenant = "RAINBOW", roles = ["admin", "chairman", "expert" ]}
        ]
      },
      {
        firstName = "Владимир"
        lastName = "Астахов"
        email = "vladimir.astahov@gmail.ru"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" }
        ]
      },
      {
        firstName = "Нина"
        lastName = "Васнецова"
        email = "nina.vasnetsova@gmail.com"
        avatarUrl = "./assets/app/media/img/users/user1.jpg"
        tenants = [
          { tenant = "SPHERA" }
        ]
      }
    ]
  }

  notification {
    debug = false
    mail {
      smtp {
        auth = true
        starttls.enable = true
        host = "smtp.gmail.com"
        ssl.trust = "smtp.gmail.com"
        port = 587
        socketFactory.port = 587
        socketFactory.class = "javax.net.ssl.SSLSocketFactory"
        connectiontimeout = 2000
        timeout = 6000
      }
      from = "davidkantemirov2017@gmail.com"
      username = "davidkantemirov2017@gmail.com"
      password = ""
    }
    sms {
      api-url = "https://app.mango-office.ru/vpbx/"
      api-key = "api-key"
      api-salt = ""
      route = "commands/sms"
      from-extension = 101 // идентификатор сотрудника (internal number)
    }
  }

  exchange {
    client {
      default = "fixerio"

      fixerio {
        base_url = "http://data.fixer.io/api/"
        access_key = "5ceea89ffdded3e890a0126190b4821e"
      }
    }
  }
}

akka {

  actor.debug.receive = off
  //loglevel = DEBUG

  loglevel = DEBUG

  //  stdout-loglevel = INFO
  #event-handlers = ["akka.event.Logging$DefaultLogger"]
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
  //  actor {
  //    provider = "akka.cluster.ClusterActorRefProvider"
  //  }
  //  remote {
  //    enabled-transports = ["akka.remote.netty.tcp"]
  //    log-remote-lifecycle-events = off
  //    netty.tcp {
  //      hostname = "127.0.0.1"
  //      port = 2551
  //      hostname = ${?HOST}
  //      port = ${?PORT}
  //    }
  //  }
  //  cluster {
  //    seed-nodes = [
  //     // "akka.tcp://annette@192.168.1.243:2551"
  //      "akka.tcp://annette@127.0.0.1:2551"
  //    ]
  //    roles = [ "seed" ]
  //    role {
  //      seed.min-nr-of-members = 1
  //    }
  //  }
}

//akka.persistence.journal.plugin = "cassandra-journal"
//akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

akka.persistence.journal.plugin = "akka-persistence-sql-async.journal"
akka.persistence.snapshot-store.plugin = "akka-persistence-sql-async.snapshot-store"

akka-persistence-sql-async {
  journal.class = "akka.persistence.journal.sqlasync.PostgreSQLAsyncWriteJournal"
  snapshot-store.class = "akka.persistence.snapshot.sqlasync.PostgreSQLSnapshotStore"

  user = "postgres"
  password = "postgres"
  url = "jdbc:postgresql://localhost:5432/annette_sphera"
  max-pool-size = 4
  wait-queue-capacity = 10000

  metadata-table-name = "persistence_metadata"
  journal-table-name = "persistence_journal"
  snapshot-table-name = "persistence_snapshot"

  connect-timeout = 5s
  query-timeout = 5s
}

slick {
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  properties = {
    databaseName = "annette_sphera"
    user = "postgres"
    password = "postgres"
  }
  numThreads = 10

  profile = "slick.jdbc.PostgresProfile$"
  db {
    url = "jdbc:postgresql://localhost:5432/annette_sphera"
    driver = org.postgresql.Driver
    user = "postgres"
    password = "postgres"
    connectionPool = true
    keepAliveConnection = true
  }
}

//cassandra-journal {
//  contact-points = [ "127.0.0.1" ]
//  keyspace = "annette_sphera"
//  authentication{
//    username = "annette"
//    password = "abc"
//  }
//}
//
//cassandra-snapshot-store {
//  contact-points = [ "127.0.0.1" ]
//  keyspace = "annette_sphera"
//  authentication{
//    username = "annette"
//    password = "abc"
//  }
//}

akka.actor.warn-about-java-serializer-usage = on