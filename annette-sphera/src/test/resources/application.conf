# Annette settings
annette {

  cluster = true

  // таймаут для акторов (в мс)
  actorTimeout = 20s

  // количество параллельных акторов данных (по умолчанию 4)
  parallelProc = 8

  core {
    AuthenticationService {
      rememberMeSessionTimeout = 14d
      sessionTimeout = 1h
    }
  }

  security {
    # Ссылка на форму входа в систему.
    # Если результат проверки аутентификации пользователя отрицательный, то перенаправляем на эту ссылку
    # Uri содержит URI первоначального запроса, после входа в систему
    login = "/auth/login?uri=:uri"

    # Tаймаут для запроса AuthenticationService (в миллисекундах),
    # Если ответ не получен после таймаута считаем, что пользователь не аутентифицирован
    # Таймаут по умолчанию 3 секунды
    authenticationServiceTimeout = 30s

    # Таймаут сессии пользователя в минутах
    sessionTimeout = 600
  }

  cassandra {
    hosts = [ "127.0.0.1" ]
    keyspace = annette
    user = "annette"
    password = "abc"
  }

//  cassandra {
//    hosts = [ "192.168.1.243", "192.168.1.231", "192.168.1.232", "192.168.1.233" ]
//    keyspace = test
//    user = "kantemirov"
//    password = "abc"
//  }

  // ============ Сервис уведомлений ============
  notification {
    retry-interval = "10 seconds"
    mail {
      smtp {
        auth = true
        starttls.enable = true
        host = "smtp.localhost"
        port = 465
        socketFactory.port = 465
        socketFactory.class = "javax.net.ssl.SSLSocketFactory"
        connectiontimeout = 1000
        timeout = 2000
        debug = true
      }
      from = "test@localhost"
      username = "test"
      password = "test"
    }
    sms {
      api-url = ""
      api-key = ""
      api-salt = ""
      route = "commands/sms"
      from-extension = 101 // идентификатор сотрудника (internal number)
    }
  }
}

akka {
  actor.debug.receive = off
  //loglevel = DEBUG

  loglevel = INFO
//  stdout-loglevel = INFO
  event-handlers = ["akka.event.Logging$DefaultLogger"]
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off

  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }
}

//akka.persistence.journal.plugin = "cassandra-journal"
//akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
//
//cassandra-journal {
//  keyspace = "bpm_persistence_test"
//  authentication{
//    username = "kantemirov"
//    password = "abc"
//  }
//}
//
//cassandra-snapshot-store {
//  keyspace = "bpm_persistence_test"
//  authentication{
//    username = "kantemirov"
//    password = "abc"
//  }
//}

#akka.actor.warn-about-java-serializer-usage = off

akka {
  actor {
    serializers {
      imcSerializer = "annette.imc.serializer.ImcSerializer"
    }

    serialization-bindings {
      "annette.imc.ApsActor$CreatedEvt" = imcSerializer
      "annette.imc.ApsActor$UpdatedEvt" = imcSerializer
      "annette.imc.ApsActor$DeletedEvt" = imcSerializer
      "annette.imc.ApsState" = imcSerializer
      "annette.imc.user.ImcUserActor$CreatedEvt" = imcSerializer
      "annette.imc.user.ImcUserActor$UpdatedEvt" = imcSerializer
      "annette.imc.user.ImcUserActor$DeletedEvt" = imcSerializer
      "annette.imc.user.ImcUserState" = imcSerializer
      "annette.imc.notification.actor.MailNotificationServiceActor$AddedNotificationEvt" = imcSerializer
      "annette.imc.notification.actor.MailNotificationServiceActor$DeletedNotificationEvt" = imcSerializer
      "annette.imc.notification.actor.MailNotificationServiceActor$UpdatedRetryEvt" = imcSerializer
      "annette.imc.notification.actor.MailNotificationServiceState" = imcSerializer
      "annette.imc.notification.actor.SmsNotificationServiceActor$AddedNotificationEvt" = imcSerializer
      "annette.imc.notification.actor.SmsNotificationServiceActor$DeletedNotificationEvt" = imcSerializer
      "annette.imc.notification.actor.SmsNotificationServiceActor$UpdatedRetryEvt" = imcSerializer
      "annette.imc.notification.actor.SmsNotificationServiceState" = imcSerializer
    }
  }
}
